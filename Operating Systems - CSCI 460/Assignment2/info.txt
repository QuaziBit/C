                                CS 460: Operating Systems
                            Montana State University, Fall 2019

                            Programming Assignment 2: Scheduling
                            Simulating Batch Scheduling Algorithms
                        Assignment Due: Friday, November 8th, 2019 @10pm

Objective:
    * Study the impact of different scheduling algorithms on the average turnaround time of concurrent processes.

Description:
    * A simulation mimics the execution of n different processes under different scheduling algorithms.

The simulation maintains a table that reflects the current state of the system:
-----------------------------------------------------------------------------------------
Process | Active | Arrival Time | Total CPU Time | Remaining CPU Time | Turnaround Time |
... 	  |  	  	 | 	  	        |                |                    |                 |
pi      |  0/1 	 |     Ai       |        Ti      |           Ri       |      TTi        |
...     |        |              |                |                    |                 |
-----------------------------------------------------------------------------------------

The table is initialized as follows:
    
   * The field “active” indicates whether the process is currently competing for the CPU.
        - The value becomes 1 at the time of process arrival and 0 at the time of process termination.
        - Initially, the value is set to 1 for all processes with arrival time Ai = 0.

    * Each Ai is an integer chosen randomly from a uniform distribution between 0 and some value 'k', where 'k'
      is a simulation parameter.
    
    * Each Ti is an integer chosen randomly from a normal (Gaussian) distribution with an average 'd' and a standard 
      deviation 'v', where 'd' and 'v' are simulation parameters.

    * Each Ri is initialized to Ti, since prior to execution, the remaining time is equal to the total CPU time required.

    * The simulation also maintains the current time, 't', which is initialized to 0 and is incremented after each  
      simulation step.


Each simulation step then consists of the following actions:

repeat until Ri == 0 for all n processes       # repeat until all processes have terminated
    while no process is active, increment t    # if no process is ready to run, just advance t
    choose active processes pi to run 
    next process                               # Ex: FIFO, SJF, SRT
    according to scheduling algorithm         
        decrement Ri                           # pi has accumulated 1 CPU time unit
        if Ri == 0                             # process i has terminated
            set active flag of pi = 0          # process i is excluded from further consideration
            TTi = t - Ai                       # the TT of process i is the time since arrival, 
                                               # TTi, until the current time t
compute the average turnaround time, ATT, by averaging all values TTi


Assignment:
    * Implement the above simulation for the 3 scheduling algorithms, FIFO, SJF, SRT.
    Assume a value for k , which is the time interval during which processes may arrive. 
    Ex: k = 1000.

    * Using a random number generator, derive n arrival times, Ai, for all processes, distributed 
    uniformly within the interval [0:k].

    * Choose an average total CPU time, d, and a standard deviation, v, and derive n total CPU times, 
    Ti, using a normal (Gaussian) distribution.

    * Repeat the simulation for different values of d and v. (For simplicity, v could be just a fixed 
    percentage of d.)

    * The values d and v should be selected relative to k. The value k/n represents the frequency 
    of process arrivals.
        - When d is much smaller than k/n , then most processes run in isolation, without having 
          to compete with other processes for the CPU. As a result, all scheduling algorithms 
          should produce similar results.
        - On the other hand, when d is much larger than k/n , then many processes will overlap 
          in time and compete for the CPU. Consequently, different scheduling algorithms should 
          yield different results.

    * To compare the different algorithms, plot the values d/ATT over d. 
      The value d/ATT=1 shows how competition for CPU slows down the processes. 
      The smaller the value, the worse the overall performance. The ideal case is d/ATT=1, 
      which indicates that all processes ran without any delays.
        - NOTE: You can use any plotting tool with which you are familiar.

Tips & Hints:
    * To complete this assignment you need to be able to choose random numbers from statistical distributions. 
      If you are brave (or bored?) you are welcome to code this yourself. 
      I do, however, recommend the GNU Scientific Library (GSL) [https://www.gnu.org/software/gsl/] 
      (See the docs here [https://www.gnu.org/software/gsl/doc/html/index.html]), 
      which should give you all the mathematical routines you should need (and more...).

    * You can install GSL however you are most comfortable (e.g., on the GSL website they suggest 
      FTP servers where GSL can be downloaded.) If on a linux machine, you should be able to simply 
      run the following command to install GSL:

      ::: sudo apt-get install gsl-bin libgsl0-dev

    * If you are using GSL, you can use my provided 
      gsl_example.c: [https://www.traviswpeters.com/cs460/code/gsl_example.c] to verify your install.



What To Turn In & Instructions On Submitting your Assignment:
    * Please submit all of your files for this assignment as a zipped folder to D2L.

    * Your zipped folder should contains at least the following files:
        - The source code file(s) you’ve written for your solution.
        - A Makefile for compiling your program.
        - A README.md file (written in Markdown), which provides instructions on how 
          to run your program, a summary of the program, and details about your approach 
          to building your solution.
        - A TESTING.md file (written in Markdown), which provides a summary of how you validated 
          the correctness of your solution. For example, you should document your observations 
          from running your program with various inputs. A bash script that invokes your program 
          with various inputs is recommended, but not required.
        
    * NOTE: You should also submit sample output. This can be pasted into the TESTING.md 
      file as appropriate, screenshots, etc.


